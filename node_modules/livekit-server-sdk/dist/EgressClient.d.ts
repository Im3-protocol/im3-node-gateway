import { EgressInfo, EncodedFileOutput, EncodingOptions, EncodingOptionsPreset, StreamOutput } from './proto/livekit_egress';
/**
* Client to access Egress APIs
*/
export default class EgressClient {
    private readonly rpc;
    private readonly apiKey?;
    private readonly secret?;
    /**
    * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'
    * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY
    * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET
    */
    constructor(host: string, apiKey?: string, secret?: string);
    /**
    * @param roomName room name
    * @param layout egress layout
    * @param output output filepath or RtmpOutput
    * @param options egress options or preset
    * @param audioOnly record audio only
    * @param videoOnly record video only
    * @param customBaseUrl custom template url
    */
    startWebCompositeEgress(roomName: string, layout: string, output: EncodedFileOutput | StreamOutput, options?: EncodingOptionsPreset | EncodingOptions, audioOnly?: boolean, videoOnly?: boolean, customBaseUrl?: string): Promise<EgressInfo>;
    /**
    * @param egressId
    * @param layout
    */
    updateLayout(egressId: string, layout: string): Promise<EgressInfo>;
    /**
    * @param egressId
    * @param addOutputUrls
    * @param removeOutputUrls
    */
    updateStream(egressId: string, addOutputUrls?: string[], removeOutputUrls?: string[]): Promise<EgressInfo>;
    /**
     * @param roomName list egress for one room only
     */
    listEgress(roomName?: string): Promise<EgressInfo>;
    /**
    * @param egressId
    */
    stopEgress(egressId: string): Promise<EgressInfo>;
    private authHeader;
}
