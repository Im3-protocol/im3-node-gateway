import * as _m0 from "protobufjs/minimal";
import { Empty } from "./google/protobuf/empty";
export declare const protobufPackage = "livekit";
export declare enum RecordingPreset {
    /** NONE - All presets use 44100 Hz, 128k bitrate for audio and a color depth of 24 */
    NONE = 0,
    /** HD_30 - 720p, 30fps, 3000 kpbs */
    HD_30 = 1,
    /** HD_60 - 720p, 60fps, 4500 kbps */
    HD_60 = 2,
    /** FULL_HD_30 - 1080p, 30fps, 4500 kbps */
    FULL_HD_30 = 3,
    /** FULL_HD_60 - 1080p, 60fps, 6000 kbps */
    FULL_HD_60 = 4,
    UNRECOGNIZED = -1
}
export declare function recordingPresetFromJSON(object: any): RecordingPreset;
export declare function recordingPresetToJSON(object: RecordingPreset): string;
export interface StartRecordingRequest {
    url: string | undefined;
    template?: RecordingTemplate | undefined;
    rtmp?: RtmpOutput | undefined;
    filepath: string | undefined;
    options?: RecordingOptions;
}
export interface RecordingTemplate {
    layout: string;
    roomName: string;
    /** defaults to https://recorder.livekit.io */
    baseUrl: string;
}
export interface RtmpOutput {
    urls: string[];
}
export interface RecordingOptions {
    preset: RecordingPreset;
    /** default 1920 */
    width: number;
    /** default 1080 */
    height: number;
    /** default 24 */
    depth: number;
    /** default 30 */
    framerate: number;
    /** default 128 */
    audioBitrate: number;
    /** default 44100 */
    audioFrequency: number;
    /** default 4500 */
    videoBitrate: number;
    /** baseline, main, or high. default main */
    profile: string;
}
export interface StartRecordingResponse {
    recordingId: string;
}
export interface AddOutputRequest {
    recordingId: string;
    rtmpUrl: string;
}
export interface RemoveOutputRequest {
    recordingId: string;
    rtmpUrl: string;
}
export interface EndRecordingRequest {
    recordingId: string;
}
export interface RecordingInfo {
    id: string;
    roomName: string;
    active: boolean;
    error: string;
    file?: FileResult;
    rtmp: RtmpResult[];
}
export interface FileResult {
    downloadUrl: string;
    duration: number;
}
export interface RtmpResult {
    streamUrl: string;
    duration: number;
}
export declare const StartRecordingRequest: {
    encode(message: StartRecordingRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): StartRecordingRequest;
    fromJSON(object: any): StartRecordingRequest;
    toJSON(message: StartRecordingRequest): unknown;
    fromPartial<I extends {
        url?: string | undefined;
        template?: {
            layout?: string | undefined;
            roomName?: string | undefined;
            baseUrl?: string | undefined;
        } | undefined;
        rtmp?: {
            urls?: string[] | undefined;
        } | undefined;
        filepath?: string | undefined;
        options?: {
            preset?: RecordingPreset | undefined;
            width?: number | undefined;
            height?: number | undefined;
            depth?: number | undefined;
            framerate?: number | undefined;
            audioBitrate?: number | undefined;
            audioFrequency?: number | undefined;
            videoBitrate?: number | undefined;
            profile?: string | undefined;
        } | undefined;
    } & {
        url?: string | undefined;
        template?: ({
            layout?: string | undefined;
            roomName?: string | undefined;
            baseUrl?: string | undefined;
        } & {
            layout?: string | undefined;
            roomName?: string | undefined;
            baseUrl?: string | undefined;
        } & Record<Exclude<keyof I["template"], keyof RecordingTemplate>, never>) | undefined;
        rtmp?: ({
            urls?: string[] | undefined;
        } & {
            urls?: (string[] & string[] & Record<Exclude<keyof I["rtmp"]["urls"], number | keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["rtmp"], "urls">, never>) | undefined;
        filepath?: string | undefined;
        options?: ({
            preset?: RecordingPreset | undefined;
            width?: number | undefined;
            height?: number | undefined;
            depth?: number | undefined;
            framerate?: number | undefined;
            audioBitrate?: number | undefined;
            audioFrequency?: number | undefined;
            videoBitrate?: number | undefined;
            profile?: string | undefined;
        } & {
            preset?: RecordingPreset | undefined;
            width?: number | undefined;
            height?: number | undefined;
            depth?: number | undefined;
            framerate?: number | undefined;
            audioBitrate?: number | undefined;
            audioFrequency?: number | undefined;
            videoBitrate?: number | undefined;
            profile?: string | undefined;
        } & Record<Exclude<keyof I["options"], keyof RecordingOptions>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof StartRecordingRequest>, never>>(object: I): StartRecordingRequest;
};
export declare const RecordingTemplate: {
    encode(message: RecordingTemplate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RecordingTemplate;
    fromJSON(object: any): RecordingTemplate;
    toJSON(message: RecordingTemplate): unknown;
    fromPartial<I extends {
        layout?: string | undefined;
        roomName?: string | undefined;
        baseUrl?: string | undefined;
    } & {
        layout?: string | undefined;
        roomName?: string | undefined;
        baseUrl?: string | undefined;
    } & Record<Exclude<keyof I, keyof RecordingTemplate>, never>>(object: I): RecordingTemplate;
};
export declare const RtmpOutput: {
    encode(message: RtmpOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RtmpOutput;
    fromJSON(object: any): RtmpOutput;
    toJSON(message: RtmpOutput): unknown;
    fromPartial<I extends {
        urls?: string[] | undefined;
    } & {
        urls?: (string[] & string[] & Record<Exclude<keyof I["urls"], number | keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "urls">, never>>(object: I): RtmpOutput;
};
export declare const RecordingOptions: {
    encode(message: RecordingOptions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RecordingOptions;
    fromJSON(object: any): RecordingOptions;
    toJSON(message: RecordingOptions): unknown;
    fromPartial<I extends {
        preset?: RecordingPreset | undefined;
        width?: number | undefined;
        height?: number | undefined;
        depth?: number | undefined;
        framerate?: number | undefined;
        audioBitrate?: number | undefined;
        audioFrequency?: number | undefined;
        videoBitrate?: number | undefined;
        profile?: string | undefined;
    } & {
        preset?: RecordingPreset | undefined;
        width?: number | undefined;
        height?: number | undefined;
        depth?: number | undefined;
        framerate?: number | undefined;
        audioBitrate?: number | undefined;
        audioFrequency?: number | undefined;
        videoBitrate?: number | undefined;
        profile?: string | undefined;
    } & Record<Exclude<keyof I, keyof RecordingOptions>, never>>(object: I): RecordingOptions;
};
export declare const StartRecordingResponse: {
    encode(message: StartRecordingResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): StartRecordingResponse;
    fromJSON(object: any): StartRecordingResponse;
    toJSON(message: StartRecordingResponse): unknown;
    fromPartial<I extends {
        recordingId?: string | undefined;
    } & {
        recordingId?: string | undefined;
    } & Record<Exclude<keyof I, "recordingId">, never>>(object: I): StartRecordingResponse;
};
export declare const AddOutputRequest: {
    encode(message: AddOutputRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddOutputRequest;
    fromJSON(object: any): AddOutputRequest;
    toJSON(message: AddOutputRequest): unknown;
    fromPartial<I extends {
        recordingId?: string | undefined;
        rtmpUrl?: string | undefined;
    } & {
        recordingId?: string | undefined;
        rtmpUrl?: string | undefined;
    } & Record<Exclude<keyof I, keyof AddOutputRequest>, never>>(object: I): AddOutputRequest;
};
export declare const RemoveOutputRequest: {
    encode(message: RemoveOutputRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RemoveOutputRequest;
    fromJSON(object: any): RemoveOutputRequest;
    toJSON(message: RemoveOutputRequest): unknown;
    fromPartial<I extends {
        recordingId?: string | undefined;
        rtmpUrl?: string | undefined;
    } & {
        recordingId?: string | undefined;
        rtmpUrl?: string | undefined;
    } & Record<Exclude<keyof I, keyof RemoveOutputRequest>, never>>(object: I): RemoveOutputRequest;
};
export declare const EndRecordingRequest: {
    encode(message: EndRecordingRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EndRecordingRequest;
    fromJSON(object: any): EndRecordingRequest;
    toJSON(message: EndRecordingRequest): unknown;
    fromPartial<I extends {
        recordingId?: string | undefined;
    } & {
        recordingId?: string | undefined;
    } & Record<Exclude<keyof I, "recordingId">, never>>(object: I): EndRecordingRequest;
};
export declare const RecordingInfo: {
    encode(message: RecordingInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RecordingInfo;
    fromJSON(object: any): RecordingInfo;
    toJSON(message: RecordingInfo): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        roomName?: string | undefined;
        active?: boolean | undefined;
        error?: string | undefined;
        file?: {
            downloadUrl?: string | undefined;
            duration?: number | undefined;
        } | undefined;
        rtmp?: {
            streamUrl?: string | undefined;
            duration?: number | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        roomName?: string | undefined;
        active?: boolean | undefined;
        error?: string | undefined;
        file?: ({
            downloadUrl?: string | undefined;
            duration?: number | undefined;
        } & {
            downloadUrl?: string | undefined;
            duration?: number | undefined;
        } & Record<Exclude<keyof I["file"], keyof FileResult>, never>) | undefined;
        rtmp?: ({
            streamUrl?: string | undefined;
            duration?: number | undefined;
        }[] & ({
            streamUrl?: string | undefined;
            duration?: number | undefined;
        } & {
            streamUrl?: string | undefined;
            duration?: number | undefined;
        } & Record<Exclude<keyof I["rtmp"][number], keyof RtmpResult>, never>)[] & Record<Exclude<keyof I["rtmp"], number | keyof {
            streamUrl?: string | undefined;
            duration?: number | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof RecordingInfo>, never>>(object: I): RecordingInfo;
};
export declare const FileResult: {
    encode(message: FileResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FileResult;
    fromJSON(object: any): FileResult;
    toJSON(message: FileResult): unknown;
    fromPartial<I extends {
        downloadUrl?: string | undefined;
        duration?: number | undefined;
    } & {
        downloadUrl?: string | undefined;
        duration?: number | undefined;
    } & Record<Exclude<keyof I, keyof FileResult>, never>>(object: I): FileResult;
};
export declare const RtmpResult: {
    encode(message: RtmpResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RtmpResult;
    fromJSON(object: any): RtmpResult;
    toJSON(message: RtmpResult): unknown;
    fromPartial<I extends {
        streamUrl?: string | undefined;
        duration?: number | undefined;
    } & {
        streamUrl?: string | undefined;
        duration?: number | undefined;
    } & Record<Exclude<keyof I, keyof RtmpResult>, never>>(object: I): RtmpResult;
};
/**
 * Recording service that can be performed on any node
 * they are Twirp-based HTTP req/responses
 */
export interface RecordingService {
    /**
     * Starts a room
     *
     * @deprecated
     */
    StartRecording(request: StartRecordingRequest): Promise<StartRecordingResponse>;
    /**
     * Adds an rtmp output to a live recording
     *
     * @deprecated
     */
    AddOutput(request: AddOutputRequest): Promise<Empty>;
    /**
     * Removes an rtmp output from a live recording
     *
     * @deprecated
     */
    RemoveOutput(request: RemoveOutputRequest): Promise<Empty>;
    /**
     * Ends a recording
     *
     * @deprecated
     */
    EndRecording(request: EndRecordingRequest): Promise<Empty>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
