"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RtmpResult = exports.FileResult = exports.RecordingInfo = exports.EndRecordingRequest = exports.RemoveOutputRequest = exports.AddOutputRequest = exports.StartRecordingResponse = exports.RecordingOptions = exports.RtmpOutput = exports.RecordingTemplate = exports.StartRecordingRequest = exports.recordingPresetToJSON = exports.recordingPresetFromJSON = exports.RecordingPreset = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "livekit";
var RecordingPreset;
(function (RecordingPreset) {
    /** NONE - All presets use 44100 Hz, 128k bitrate for audio and a color depth of 24 */
    RecordingPreset[RecordingPreset["NONE"] = 0] = "NONE";
    /** HD_30 - 720p, 30fps, 3000 kpbs */
    RecordingPreset[RecordingPreset["HD_30"] = 1] = "HD_30";
    /** HD_60 - 720p, 60fps, 4500 kbps */
    RecordingPreset[RecordingPreset["HD_60"] = 2] = "HD_60";
    /** FULL_HD_30 - 1080p, 30fps, 4500 kbps */
    RecordingPreset[RecordingPreset["FULL_HD_30"] = 3] = "FULL_HD_30";
    /** FULL_HD_60 - 1080p, 60fps, 6000 kbps */
    RecordingPreset[RecordingPreset["FULL_HD_60"] = 4] = "FULL_HD_60";
    RecordingPreset[RecordingPreset["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RecordingPreset = exports.RecordingPreset || (exports.RecordingPreset = {}));
function recordingPresetFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return RecordingPreset.NONE;
        case 1:
        case "HD_30":
            return RecordingPreset.HD_30;
        case 2:
        case "HD_60":
            return RecordingPreset.HD_60;
        case 3:
        case "FULL_HD_30":
            return RecordingPreset.FULL_HD_30;
        case 4:
        case "FULL_HD_60":
            return RecordingPreset.FULL_HD_60;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RecordingPreset.UNRECOGNIZED;
    }
}
exports.recordingPresetFromJSON = recordingPresetFromJSON;
function recordingPresetToJSON(object) {
    switch (object) {
        case RecordingPreset.NONE:
            return "NONE";
        case RecordingPreset.HD_30:
            return "HD_30";
        case RecordingPreset.HD_60:
            return "HD_60";
        case RecordingPreset.FULL_HD_30:
            return "FULL_HD_30";
        case RecordingPreset.FULL_HD_60:
            return "FULL_HD_60";
        default:
            return "UNKNOWN";
    }
}
exports.recordingPresetToJSON = recordingPresetToJSON;
function createBaseStartRecordingRequest() {
    return {
        url: undefined,
        template: undefined,
        rtmp: undefined,
        filepath: undefined,
        options: undefined,
    };
}
exports.StartRecordingRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== undefined) {
            writer.uint32(10).string(message.url);
        }
        if (message.template !== undefined) {
            exports.RecordingTemplate.encode(message.template, writer.uint32(18).fork()).ldelim();
        }
        if (message.rtmp !== undefined) {
            exports.RtmpOutput.encode(message.rtmp, writer.uint32(26).fork()).ldelim();
        }
        if (message.filepath !== undefined) {
            writer.uint32(34).string(message.filepath);
        }
        if (message.options !== undefined) {
            exports.RecordingOptions.encode(message.options, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartRecordingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.url = reader.string();
                    break;
                case 2:
                    message.template = exports.RecordingTemplate.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.rtmp = exports.RtmpOutput.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.filepath = reader.string();
                    break;
                case 5:
                    message.options = exports.RecordingOptions.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? String(object.url) : undefined,
            template: isSet(object.template)
                ? exports.RecordingTemplate.fromJSON(object.template)
                : undefined,
            rtmp: isSet(object.rtmp) ? exports.RtmpOutput.fromJSON(object.rtmp) : undefined,
            filepath: isSet(object.filepath) ? String(object.filepath) : undefined,
            options: isSet(object.options)
                ? exports.RecordingOptions.fromJSON(object.options)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        message.template !== undefined &&
            (obj.template = message.template
                ? exports.RecordingTemplate.toJSON(message.template)
                : undefined);
        message.rtmp !== undefined &&
            (obj.rtmp = message.rtmp ? exports.RtmpOutput.toJSON(message.rtmp) : undefined);
        message.filepath !== undefined && (obj.filepath = message.filepath);
        message.options !== undefined &&
            (obj.options = message.options
                ? exports.RecordingOptions.toJSON(message.options)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStartRecordingRequest();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : undefined;
        message.template =
            object.template !== undefined && object.template !== null
                ? exports.RecordingTemplate.fromPartial(object.template)
                : undefined;
        message.rtmp =
            object.rtmp !== undefined && object.rtmp !== null
                ? exports.RtmpOutput.fromPartial(object.rtmp)
                : undefined;
        message.filepath = (_b = object.filepath) !== null && _b !== void 0 ? _b : undefined;
        message.options =
            object.options !== undefined && object.options !== null
                ? exports.RecordingOptions.fromPartial(object.options)
                : undefined;
        return message;
    },
};
function createBaseRecordingTemplate() {
    return { layout: "", roomName: "", baseUrl: "" };
}
exports.RecordingTemplate = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.layout !== "") {
            writer.uint32(10).string(message.layout);
        }
        if (message.roomName !== "") {
            writer.uint32(18).string(message.roomName);
        }
        if (message.baseUrl !== "") {
            writer.uint32(26).string(message.baseUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecordingTemplate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.layout = reader.string();
                    break;
                case 2:
                    message.roomName = reader.string();
                    break;
                case 3:
                    message.baseUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            layout: isSet(object.layout) ? String(object.layout) : "",
            roomName: isSet(object.roomName) ? String(object.roomName) : "",
            baseUrl: isSet(object.baseUrl) ? String(object.baseUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.layout !== undefined && (obj.layout = message.layout);
        message.roomName !== undefined && (obj.roomName = message.roomName);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRecordingTemplate();
        message.layout = (_a = object.layout) !== null && _a !== void 0 ? _a : "";
        message.roomName = (_b = object.roomName) !== null && _b !== void 0 ? _b : "";
        message.baseUrl = (_c = object.baseUrl) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseRtmpOutput() {
    return { urls: [] };
}
exports.RtmpOutput = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.urls) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRtmpOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.urls.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            urls: Array.isArray(object === null || object === void 0 ? void 0 : object.urls)
                ? object.urls.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.urls) {
            obj.urls = message.urls.map((e) => e);
        }
        else {
            obj.urls = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRtmpOutput();
        message.urls = ((_a = object.urls) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseRecordingOptions() {
    return {
        preset: 0,
        width: 0,
        height: 0,
        depth: 0,
        framerate: 0,
        audioBitrate: 0,
        audioFrequency: 0,
        videoBitrate: 0,
        profile: "",
    };
}
exports.RecordingOptions = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.preset !== 0) {
            writer.uint32(8).int32(message.preset);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(24).int32(message.height);
        }
        if (message.depth !== 0) {
            writer.uint32(32).int32(message.depth);
        }
        if (message.framerate !== 0) {
            writer.uint32(40).int32(message.framerate);
        }
        if (message.audioBitrate !== 0) {
            writer.uint32(48).int32(message.audioBitrate);
        }
        if (message.audioFrequency !== 0) {
            writer.uint32(56).int32(message.audioFrequency);
        }
        if (message.videoBitrate !== 0) {
            writer.uint32(64).int32(message.videoBitrate);
        }
        if (message.profile !== "") {
            writer.uint32(74).string(message.profile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecordingOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.preset = reader.int32();
                    break;
                case 2:
                    message.width = reader.int32();
                    break;
                case 3:
                    message.height = reader.int32();
                    break;
                case 4:
                    message.depth = reader.int32();
                    break;
                case 5:
                    message.framerate = reader.int32();
                    break;
                case 6:
                    message.audioBitrate = reader.int32();
                    break;
                case 7:
                    message.audioFrequency = reader.int32();
                    break;
                case 8:
                    message.videoBitrate = reader.int32();
                    break;
                case 9:
                    message.profile = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            preset: isSet(object.preset) ? recordingPresetFromJSON(object.preset) : 0,
            width: isSet(object.width) ? Number(object.width) : 0,
            height: isSet(object.height) ? Number(object.height) : 0,
            depth: isSet(object.depth) ? Number(object.depth) : 0,
            framerate: isSet(object.framerate) ? Number(object.framerate) : 0,
            audioBitrate: isSet(object.audioBitrate)
                ? Number(object.audioBitrate)
                : 0,
            audioFrequency: isSet(object.audioFrequency)
                ? Number(object.audioFrequency)
                : 0,
            videoBitrate: isSet(object.videoBitrate)
                ? Number(object.videoBitrate)
                : 0,
            profile: isSet(object.profile) ? String(object.profile) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.preset !== undefined &&
            (obj.preset = recordingPresetToJSON(message.preset));
        message.width !== undefined && (obj.width = Math.round(message.width));
        message.height !== undefined && (obj.height = Math.round(message.height));
        message.depth !== undefined && (obj.depth = Math.round(message.depth));
        message.framerate !== undefined &&
            (obj.framerate = Math.round(message.framerate));
        message.audioBitrate !== undefined &&
            (obj.audioBitrate = Math.round(message.audioBitrate));
        message.audioFrequency !== undefined &&
            (obj.audioFrequency = Math.round(message.audioFrequency));
        message.videoBitrate !== undefined &&
            (obj.videoBitrate = Math.round(message.videoBitrate));
        message.profile !== undefined && (obj.profile = message.profile);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseRecordingOptions();
        message.preset = (_a = object.preset) !== null && _a !== void 0 ? _a : 0;
        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;
        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;
        message.depth = (_d = object.depth) !== null && _d !== void 0 ? _d : 0;
        message.framerate = (_e = object.framerate) !== null && _e !== void 0 ? _e : 0;
        message.audioBitrate = (_f = object.audioBitrate) !== null && _f !== void 0 ? _f : 0;
        message.audioFrequency = (_g = object.audioFrequency) !== null && _g !== void 0 ? _g : 0;
        message.videoBitrate = (_h = object.videoBitrate) !== null && _h !== void 0 ? _h : 0;
        message.profile = (_j = object.profile) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseStartRecordingResponse() {
    return { recordingId: "" };
}
exports.StartRecordingResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartRecordingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            recordingId: isSet(object.recordingId) ? String(object.recordingId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStartRecordingResponse();
        message.recordingId = (_a = object.recordingId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAddOutputRequest() {
    return { recordingId: "", rtmpUrl: "" };
}
exports.AddOutputRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        if (message.rtmpUrl !== "") {
            writer.uint32(18).string(message.rtmpUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOutputRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                case 2:
                    message.rtmpUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            recordingId: isSet(object.recordingId) ? String(object.recordingId) : "",
            rtmpUrl: isSet(object.rtmpUrl) ? String(object.rtmpUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        message.rtmpUrl !== undefined && (obj.rtmpUrl = message.rtmpUrl);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddOutputRequest();
        message.recordingId = (_a = object.recordingId) !== null && _a !== void 0 ? _a : "";
        message.rtmpUrl = (_b = object.rtmpUrl) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveOutputRequest() {
    return { recordingId: "", rtmpUrl: "" };
}
exports.RemoveOutputRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        if (message.rtmpUrl !== "") {
            writer.uint32(18).string(message.rtmpUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveOutputRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                case 2:
                    message.rtmpUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            recordingId: isSet(object.recordingId) ? String(object.recordingId) : "",
            rtmpUrl: isSet(object.rtmpUrl) ? String(object.rtmpUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        message.rtmpUrl !== undefined && (obj.rtmpUrl = message.rtmpUrl);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveOutputRequest();
        message.recordingId = (_a = object.recordingId) !== null && _a !== void 0 ? _a : "";
        message.rtmpUrl = (_b = object.rtmpUrl) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEndRecordingRequest() {
    return { recordingId: "" };
}
exports.EndRecordingRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEndRecordingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            recordingId: isSet(object.recordingId) ? String(object.recordingId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEndRecordingRequest();
        message.recordingId = (_a = object.recordingId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRecordingInfo() {
    return {
        id: "",
        roomName: "",
        active: false,
        error: "",
        file: undefined,
        rtmp: [],
    };
}
exports.RecordingInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.roomName !== "") {
            writer.uint32(18).string(message.roomName);
        }
        if (message.active === true) {
            writer.uint32(24).bool(message.active);
        }
        if (message.error !== "") {
            writer.uint32(34).string(message.error);
        }
        if (message.file !== undefined) {
            exports.FileResult.encode(message.file, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.rtmp) {
            exports.RtmpResult.encode(v, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecordingInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.roomName = reader.string();
                    break;
                case 3:
                    message.active = reader.bool();
                    break;
                case 4:
                    message.error = reader.string();
                    break;
                case 5:
                    message.file = exports.FileResult.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.rtmp.push(exports.RtmpResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            roomName: isSet(object.roomName) ? String(object.roomName) : "",
            active: isSet(object.active) ? Boolean(object.active) : false,
            error: isSet(object.error) ? String(object.error) : "",
            file: isSet(object.file) ? exports.FileResult.fromJSON(object.file) : undefined,
            rtmp: Array.isArray(object === null || object === void 0 ? void 0 : object.rtmp)
                ? object.rtmp.map((e) => exports.RtmpResult.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.roomName !== undefined && (obj.roomName = message.roomName);
        message.active !== undefined && (obj.active = message.active);
        message.error !== undefined && (obj.error = message.error);
        message.file !== undefined &&
            (obj.file = message.file ? exports.FileResult.toJSON(message.file) : undefined);
        if (message.rtmp) {
            obj.rtmp = message.rtmp.map((e) => e ? exports.RtmpResult.toJSON(e) : undefined);
        }
        else {
            obj.rtmp = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseRecordingInfo();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.roomName = (_b = object.roomName) !== null && _b !== void 0 ? _b : "";
        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;
        message.error = (_d = object.error) !== null && _d !== void 0 ? _d : "";
        message.file =
            object.file !== undefined && object.file !== null
                ? exports.FileResult.fromPartial(object.file)
                : undefined;
        message.rtmp = ((_e = object.rtmp) === null || _e === void 0 ? void 0 : _e.map((e) => exports.RtmpResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseFileResult() {
    return { downloadUrl: "", duration: 0 };
}
exports.FileResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.downloadUrl !== "") {
            writer.uint32(10).string(message.downloadUrl);
        }
        if (message.duration !== 0) {
            writer.uint32(16).int64(message.duration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.downloadUrl = reader.string();
                    break;
                case 2:
                    message.duration = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            downloadUrl: isSet(object.downloadUrl) ? String(object.downloadUrl) : "",
            duration: isSet(object.duration) ? Number(object.duration) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.downloadUrl !== undefined &&
            (obj.downloadUrl = message.downloadUrl);
        message.duration !== undefined &&
            (obj.duration = Math.round(message.duration));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFileResult();
        message.downloadUrl = (_a = object.downloadUrl) !== null && _a !== void 0 ? _a : "";
        message.duration = (_b = object.duration) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseRtmpResult() {
    return { streamUrl: "", duration: 0 };
}
exports.RtmpResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.streamUrl !== "") {
            writer.uint32(10).string(message.streamUrl);
        }
        if (message.duration !== 0) {
            writer.uint32(16).int64(message.duration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRtmpResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.streamUrl = reader.string();
                    break;
                case 2:
                    message.duration = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            streamUrl: isSet(object.streamUrl) ? String(object.streamUrl) : "",
            duration: isSet(object.duration) ? Number(object.duration) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.streamUrl !== undefined && (obj.streamUrl = message.streamUrl);
        message.duration !== undefined &&
            (obj.duration = Math.round(message.duration));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRtmpResult();
        message.streamUrl = (_a = object.streamUrl) !== null && _a !== void 0 ? _a : "";
        message.duration = (_b = object.duration) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=livekit_recording.js.map