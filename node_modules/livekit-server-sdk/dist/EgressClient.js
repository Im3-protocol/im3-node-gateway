"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AccessToken_1 = require("./AccessToken");
const livekit_egress_1 = require("./proto/livekit_egress");
const TwirpRPC_1 = require("./TwirpRPC");
const svc = 'Egress';
/**
* Client to access Egress APIs
*/
class EgressClient {
    /**
    * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'
    * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY
    * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET
    */
    constructor(host, apiKey, secret) {
        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);
        this.apiKey = apiKey;
        this.secret = secret;
    }
    /**
    * @param roomName room name
    * @param layout egress layout
    * @param output output filepath or RtmpOutput
    * @param options egress options or preset
    * @param audioOnly record audio only
    * @param videoOnly record video only
    * @param customBaseUrl custom template url
    */
    startWebCompositeEgress(roomName, layout, output, options, audioOnly, videoOnly, customBaseUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            let file;
            let stream;
            let preset;
            let advanced;
            if (!audioOnly) {
                audioOnly = false;
            }
            if (!videoOnly) {
                videoOnly = false;
            }
            if (!customBaseUrl) {
                customBaseUrl = '';
            }
            if (output.filepath !== undefined) {
                file = output;
            }
            else {
                stream = output;
            }
            if (options) {
                if (typeof options === 'number') {
                    preset = options;
                }
                else {
                    advanced = options;
                }
            }
            const req = livekit_egress_1.WebCompositeEgressRequest.toJSON({
                roomName, layout, audioOnly, videoOnly, file, stream, preset, advanced, customBaseUrl,
            });
            const data = yield this.rpc.request(svc, 'StartWebCompositeEgress', req, this.authHeader({ roomRecord: true }));
            return livekit_egress_1.EgressInfo.fromJSON(data);
        });
    }
    /**
    * @param egressId
    * @param layout
    */
    updateLayout(egressId, layout) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.rpc.request(svc, 'UpdateLayout', livekit_egress_1.UpdateLayoutRequest.toJSON({ egressId, layout }), this.authHeader({ roomRecord: true }));
            return livekit_egress_1.EgressInfo.fromJSON(data);
        });
    }
    /**
    * @param egressId
    * @param addOutputUrls
    * @param removeOutputUrls
    */
    updateStream(egressId, addOutputUrls, removeOutputUrls) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!addOutputUrls) {
                addOutputUrls = [];
            }
            if (!removeOutputUrls) {
                removeOutputUrls = [];
            }
            const data = yield this.rpc.request(svc, 'UpdateStream', livekit_egress_1.UpdateStreamRequest.toJSON({ egressId, addOutputUrls, removeOutputUrls }), this.authHeader({ roomRecord: true }));
            return livekit_egress_1.EgressInfo.fromJSON(data);
        });
    }
    /**
     * @param roomName list egress for one room only
     */
    listEgress(roomName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!roomName) {
                roomName = '';
            }
            const data = yield this.rpc.request(svc, 'ListEgress', livekit_egress_1.ListEgressRequest.toJSON({ roomName }), this.authHeader({ roomRecord: true }));
            return livekit_egress_1.EgressInfo.fromJSON(data);
        });
    }
    /**
    * @param egressId
    */
    stopEgress(egressId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.rpc.request(svc, 'StopEgress', livekit_egress_1.StopEgressRequest.toJSON({ egressId }), this.authHeader({ roomRecord: true }));
            return livekit_egress_1.EgressInfo.fromJSON(data);
        });
    }
    authHeader(grant) {
        const at = new AccessToken_1.AccessToken(this.apiKey, this.secret, { ttl: '10m' });
        at.addGrant(grant);
        return {
            Authorization: `Bearer ${at.toJwt()}`,
        };
    }
}
exports.default = EgressClient;
//# sourceMappingURL=EgressClient.js.map